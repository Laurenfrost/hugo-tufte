<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>操作系统 on Hugo-tufte Theme Example Site</title><link>https://laurenfrost.github.io/hugo-tufte-cjk/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link><description>Recent content in 操作系统 on Hugo-tufte Theme Example Site</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 18 Aug 2020 17:31:35 +0000</lastBuildDate><atom:link href="https://laurenfrost.github.io/hugo-tufte-cjk/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/index.xml" rel="self" type="application/rss+xml"/><item><title>Towards Transparent CPU Scheduling</title><link>https://laurenfrost.github.io/hugo-tufte-cjk/post/linux-cpu-scheduling/</link><pubDate>Tue, 18 Aug 2020 17:31:35 +0000</pubDate><guid>https://laurenfrost.github.io/hugo-tufte-cjk/post/linux-cpu-scheduling/</guid><description>最近在看 OSTEP，作者在进程调度部分推荐了该论文：
Joseph T. Meehean, Towards Transparent CPU Scheduling, University of Wisconsin–Madison, 2011
于是我在有道翻译的帮助下翻译该博士论文，有些地方本人进行了润色。
本文提出用科学的方法对 CPU 调度器有更深入的了解； 我们使用这种方法来解释和理解 CPU 调度器有时不稳定的行为。这种方法首先将受控的工作负载引入商品操作系统，并观察 CPU 调度器的行为。通过这些观察，我们能够推断底层 CPU 调度策略，并创建预测调度行为的模型。
在将科学分析应用于 CPU 调度器方面，我们已经取得了两项进展。首先是 CPU Futures，这是一个嵌入到 CPU 调度器和用户空间控制器中的预测调度模型的组合，后者使用来自这些模型的反馈来指导应用程序。我们基于两种不同的调度范例(分时和比例-份额)，为两种不同的 Linux 调度器(CFS 和 O(1))开发了这些预测模型。通过三个不同的案例研究，我们演示了应用程序可以使用我们的预测模型将来自低重要性应用程序的干扰减少 70% 以上，将 Web 服务器的供应不足减少一个数量级，并执行与 CPU 调度器相矛盾的调度策略。
我们的第二个贡献是 Harmony。这是一个框架和一组实验，用于从普通操作系统中提取多处理器调度策略。我们使用这个工具提取和分析三个 Linux 调度器的策略：O(1)、CFS 和 BFS。这些调度器通常执行截然不同的策略。从高层次的角度来看，O(1) 调度器谨慎地选择要迁移的进程,更看重 处理器亲缘性 ( Processor Affinity ) 。相反，CFS 则不断地寻找更好的平衡，最终选择了随机迁移进程。而 BFS 则非常看重公平性，经常忽略处理器关联性。
导论 把自己渴望的东西托付给漫不经心的希望，用至高无上的理由把自己不渴望的东西推到一边。这就是人类的习性。
Thucydides 目前，应用程序、开发人员和系统研究人员都将最佳工作 CPU 调度器视为可靠的黑箱。依赖这些调度器来提供底层但至关重要的服务。在过去的几十年里，处理器快速增长的性能支持了这种依赖和映像。</description></item></channel></rss>